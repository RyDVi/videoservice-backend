"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import environ
import os
from videofiles.storage import CDNVideoStorageFile, CDNVideoApi
from django.core.files.storage import default_storage
import logging

logger = logging.getLogger(__name__)

# Set the project base directory
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# Take environment variables from .env file
environ.Env.read_env(os.path.join(BASE_DIR, ".envrc"))
env = environ.Env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-z9k&y3#8!swy0+lfeshu-c!c_r#_o4n-fx+w_966y18gvz#xw_"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]
CORS_ALLOWED_ORIGINS = ["http://localhost:3000", "http://localhost:3001", "https://videoservice-client.vercel.app", "https://videoservice-crm.vercel.app"]


# Application definition

INSTALLED_APPS = [
    "channels",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    "django_filters",
    "rest_framework",
    "rest_framework.authtoken",
    "corsheaders",
    "django.contrib.sites",
    "organization.apps.OrganizationConfig",
    "films.apps.FilmsConfig",
    "users.apps.UsersConfig",
    "deals.apps.DealsConfig",
    "leads.apps.LeadsConfig",
    "videofiles.apps.VideofilesConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "organization.middleware.CurrentOrgMiddleware",
    "corsheaders.middleware.CorsMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, 'templates')],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"
ASGI_APPLICATION = "backend.asgi.application"


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": env("USER"),
        "USER": env("USER"),
        "PASSWORD": env("PGPASSWORD", default=""),
        "HOST": env("PGHOST"),
        "PORT": env("PGPORT"),
    },
    # "default":{
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    # },
    # "default":{
    #     'ENGINE': 'django.db.backends.mysql',
    #     'NAME': env("USER"),
    #     'USER': env("USER"),
    #     'PASSWORD': env("MYSQLPASSWORD", default=""),
    #     'HOST': env("MYSQLHOST", default=""),
    #     'PORT': env("MYSQLPORT", default="3306"),
    # }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        # "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend']
}

MEDIA_ROOT = os.path.join(BASE_DIR, "files")
MEDIA_URL = "/media/"

MEDIA_URL_IMAGES = MEDIA_URL + "/images/"
MEDIA_PHYSICAL_IMAGES_LOCATION = os.path.join(MEDIA_ROOT, "images")
MEDIA_PHYSICAL_VIDEO_LOCATION = os.path.join(MEDIA_ROOT, "video")

NEXTJS_SETTINGS = {
    "nextjs_server_url": "http://127.0.0.1:3000",
}

SITE_ID = 1

AUTHENTICATION_BACKENDS = ["users.backends.EmailOrUsernameModelBackend"]

CDN_VIDEO_EMAIL = env("CDN_VIDEO_EMAIL", default=False)
CDN_VIDEO_PASSWORD = env("CDN_VIDEO_PASSWORD", default=False)
CDN_VIDEO_USERNAME = env("CDN_VIDEO_USERNAME", default=False)

CDN_STORAGE = default_storage
if CDN_VIDEO_EMAIL and CDN_VIDEO_PASSWORD and CDN_VIDEO_USERNAME:
    logger.info('CDN Credentionals found. Will be used CDN storage.')
    api = CDNVideoApi(username=CDN_VIDEO_USERNAME, email=CDN_VIDEO_EMAIL, password=CDN_VIDEO_PASSWORD)
    api.fetch_token()
    CDN_STORAGE = CDNVideoStorageFile(api=api)
else:
    logger.info('CDN Credentionals not provided. Will be used default django storage.')
    
    
OPENAI_API_KEY=env("OPENAI_API_KEY")


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# Host for sending e-mail.
EMAIL_HOST = env("EMAIL_HOST", default='127.0.0.1')

# Port for sending e-mail.
EMAIL_PORT = env("EMAIL_PORT", default=1025)

# Optional SMTP authentication information for EMAIL_HOST.
EMAIL_HOST_USER = env("EMAIL_HOST_USER", default='')
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD", default='')
EMAIL_USE_TLS = env("EMAIL_USER_TLS", default=False)