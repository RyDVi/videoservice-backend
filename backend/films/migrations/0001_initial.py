# Generated by Django 4.0.5 on 2023-04-06 15:41

from django.conf import settings
import django.core.files.storage
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('organization', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('deals', '0002_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('slug', models.SlugField(max_length=256, verbose_name='slug')),
                ('name', models.CharField(max_length=255, verbose_name='genre of film')),
                ('org', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='organization.organization', verbose_name='data of organization')),
            ],
            options={
                'db_table': 'categories',
            },
        ),
        migrations.CreateModel(
            name='Film',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('slug', models.SlugField(max_length=256, verbose_name='slug')),
                ('image', models.ImageField(null=True, storage=django.core.files.storage.FileSystemStorage(base_url='/media//images/', location='C:\\Users\\RyDVi\\Documents\\dev\\videoservice-backend\\backend\\files\\images'), upload_to='', verbose_name='film image')),
                ('name', models.CharField(max_length=256, verbose_name='film name')),
                ('original_name', models.CharField(max_length=256, verbose_name='original film name')),
                ('description_full', models.TextField(verbose_name='film description')),
                ('description_short', models.TextField(verbose_name='film short description')),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2, null=True, verbose_name='film country')),
                ('content_rating', models.PositiveSmallIntegerField(choices=[(0, 0), (6, 6), (12, 12), (16, 16), (18, 18)], default=0, verbose_name='film content rating by content rating system')),
                ('year', models.PositiveIntegerField(default=2023)),
                ('type', models.CharField(choices=[('film', 'Film'), ('serial', 'Serial')], default='film', max_length=6, verbose_name='type of film')),
            ],
            options={
                'db_table': 'films',
            },
        ),
        migrations.CreateModel(
            name='PersonRole',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='name')),
                ('org', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='organization.organization', verbose_name='data of organization')),
            ],
            options={
                'db_table': 'person_roles',
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('firstname', models.CharField(blank=True, max_length=255, verbose_name='firstname')),
                ('lastname', models.CharField(blank=True, max_length=255, verbose_name='lastname')),
                ('org', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='organization.organization', verbose_name='data of organization')),
            ],
            options={
                'db_table': 'persons',
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('slug', models.SlugField(max_length=256, verbose_name='slug')),
                ('name', models.CharField(max_length=255, verbose_name='genre of film')),
                ('org', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='organization.organization', verbose_name='data of organization')),
            ],
            options={
                'db_table': 'genres',
            },
        ),
        migrations.CreateModel(
            name='FilmsUsers',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('rating', models.PositiveSmallIntegerField(default=None, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('bookmark', models.BooleanField(default=False, verbose_name='added to bookmarks')),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='films_users', to='films.film')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='films_users', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'films_users',
            },
        ),
        migrations.CreateModel(
            name='FilmsPersons',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='films_persons', to='films.film')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='films_persons', to='films.person')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='person', to='films.personrole')),
            ],
            options={
                'db_table': 'films_persons',
            },
        ),
        migrations.CreateModel(
            name='FilmsGenres',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='films_genres', to='films.film')),
                ('genre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='films_genres', to='films.genre')),
            ],
            options={
                'db_table': 'films_genres',
            },
        ),
        migrations.CreateModel(
            name='FilmsCategories',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='films_categories', to='films.category')),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='films_categories', to='films.film')),
            ],
            options={
                'db_table': 'films_categories',
            },
        ),
        migrations.CreateModel(
            name='FilmPrice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('price', models.DecimalField(decimal_places='2', max_digits=20)),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prices', to='films.film')),
                ('org', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='organization.organization', verbose_name='data of organization')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prices', to='deals.dealtype')),
            ],
            options={
                'db_table': 'film_prices',
            },
        ),
        migrations.AddField(
            model_name='film',
            name='categories',
            field=models.ManyToManyField(related_name='films', through='films.FilmsCategories', to='films.category', verbose_name='categories of film'),
        ),
        migrations.AddField(
            model_name='film',
            name='genres',
            field=models.ManyToManyField(related_name='films', through='films.FilmsGenres', to='films.genre', verbose_name='genres of film'),
        ),
        migrations.AddField(
            model_name='film',
            name='org',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='organization.organization', verbose_name='data of organization'),
        ),
        migrations.AddField(
            model_name='film',
            name='persons',
            field=models.ManyToManyField(related_name='films', through='films.FilmsPersons', to='films.person', verbose_name='Persons involved in the making of the film'),
        ),
        migrations.AddField(
            model_name='film',
            name='users',
            field=models.ManyToManyField(related_name='films', through='films.FilmsUsers', to=settings.AUTH_USER_MODEL, verbose_name='users films'),
        ),
        migrations.AddConstraint(
            model_name='personrole',
            constraint=models.UniqueConstraint(fields=('name', 'org'), name='unique roles by org'),
        ),
        migrations.AddConstraint(
            model_name='person',
            constraint=models.UniqueConstraint(fields=('firstname', 'lastname', 'org'), name='unique person by org'),
        ),
        migrations.AddConstraint(
            model_name='genre',
            constraint=models.UniqueConstraint(fields=('org', 'name'), name='unique genre by org'),
        ),
        migrations.AlterUniqueTogether(
            name='filmsusers',
            unique_together={('film', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='filmspersons',
            unique_together={('film', 'person', 'role')},
        ),
        migrations.AlterUniqueTogether(
            name='filmsgenres',
            unique_together={('film', 'genre')},
        ),
        migrations.AlterUniqueTogether(
            name='filmscategories',
            unique_together={('category', 'film')},
        ),
        migrations.AddConstraint(
            model_name='filmprice',
            constraint=models.UniqueConstraint(fields=('film', 'type', 'org'), name='unique by film, price type and org'),
        ),
        migrations.AddConstraint(
            model_name='category',
            constraint=models.UniqueConstraint(fields=('org', 'name'), name='unique category by org'),
        ),
    ]
